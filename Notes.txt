restart computer use this code:
brew services start mongodb-community@6.0


// SETUP SERVER
    create a server folder
    create a file called "server.js" inside server folder
    cd server
    ls server.js
    npm init -y
    npm install express mongoose cors


// CREATE FOLDERS
create folders in the "server" folder
    - config
    - controllers
    - models
    - routes


// SERVER.JS
const express = require('express');
const cors = require('cors');
const app = express();
const port = 8000;
const DB = "authors"

app.use(cors(), express.json(), express.urlencoded({extended:true}));

require("./config/mongooseConfig")(DB)

require("./routes/authorsRoute")(app)

app.listen(port, () => console.log(`>> server up on ${port} <<`) );


// CONFIG
const mongoose = require("mongoose");
module.exports = (DB) => {
    mongoose.connect('mongodb://localhost/' + DB, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
    .then(() => console.log('Established a connection to the database'))
    .catch(err => console.log('Something went wrong when connecting to the database ', err));
}


// CONTROLLER
const Pirate = require('../models/pirateModel');

module.exports = {
    findAll: (req, res) => {
        Pirate.find()
            .then(allPirates => {
                res.json(allPirates)
            })
            .catch(err => res.status(400).json(err))
    },

    create: (req, res) => {
        Pirate.create(req.body)
            .then(newPirate => {
                console.log("SERVER SUCCESS")
                res.json(newPirate);
            })
            .catch(err => {
                console.log("SERVER ERROR")
                res.status(400).json(err)
            })
    },

    findOne: (req, res) => {
        Pirate.findById(req.params.id)
        .then(onePirate => res.json(onePirate))
        .catch(err => res.status(400).json(err))
    },

    update: (req, res) => {
        console.log("UPDATE ID:", req.params.id)
        console.log("req.body:", req.body)
        Pirate.findByIdAndUpdate(req.params.id, req.body, {new: true, runValidators: true})
            .then(updatedPirate => res.json(updatedPirate))
            .catch(err => res.status(400).json(err))
    },

    delete: (req, res) => {
        Pirate.findByIdAndDelete(req.params.id)
            .then(result => res.json(result))
            .catch(err => res.status(400).json(err))
    },
}


// MODELS
const mongoose = require('mongoose');

const PirateSchema = new mongoose.Schema({
    name: {
        type: String,
        required: [true, "{PATH} must be present."],
        minlength: [3, "{PATH} must be at least 3 chars long"]
    },
    image: {
        type: String,
        required: [true, "{PATH} must be present."],
    },
    treasures: {
        type: Number,
        required: [true, "{PATH} must be present."],
    },
    phrase: {
        type: String,
        required: [true, "{PATH} must be present."],
        minlength: [3, "{PATH} must be at least 3 chars long"]
    },
    position: {
        type: String,
        required: [true, "{PATH} must be present."],
        minlength: [3, "{PATH} must be at least 3 chars long"]
    },
    isPegLeg: {
        type: Boolean,
        default: false
    },
    isEyePatch: {
        type: Boolean,
        default: false
    },
    isHookHand: {
        type: Boolean,
        default: false
    }
}, { timestamp: true });

const Pirate = mongoose.model("Pirate", PirateSchema);

module.exports = Pirate;


// ROUTES
const Product = require("../controllers/productController");

module.exports = (app) => {
    app.get("/api/products/", Product.findAll);
    app.post("/api/products/", Product.create);
    app.get("/api/products/:id", Product.findOne);
    app.put("/api/products/:id", Product.update);
    app.delete("/api/products/:id", Product.delete);
}


// RUN SERVER
    ls
    nodemon server.js
    localhost:8000 on browser


// POSTMAN
    check routes


// START REACT (CLIENT)
npx create-react-app your-project-name-here (client)
cd (project folder) client
npm install axios react-router-dom
npm start


// INDEX.JS
comment out <React.StrictMode> //
import {BrowserRouter} from 'react-router-dom'

<BrowserRouter>
    <App />
</BrowserRouter>

// CREATE COMPONENTS FOLDER IN SRC
    create Main.jsx
    create Create.jsx
    create ViewOne.jsx
    create Update.jsx